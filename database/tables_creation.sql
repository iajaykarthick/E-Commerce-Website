CREATE DATABASE IF NOT EXISTS BOOK_STORE;
USE BOOK_STORE;

DROP TABLE IF EXISTS CUSTOMER_PREFERENCE;
DROP TABLE IF EXISTS BOOK_GENRE;
DROP TABLE IF EXISTS GENRE;
DROP TABLE IF EXISTS CART;
DROP TABLE IF EXISTS WISH_LIST;
DROP TABLE IF EXISTS ORDER_ITEMS;
DROP TABLE IF EXISTS ORDERS;
DROP TABLE IF EXISTS PAYMENT;
DROP TABLE IF EXISTS LOGIN;
DROP TABLE IF EXISTS CUSTOMER;
DROP TABLE IF EXISTS SUBSCRIPTION;
DROP TABLE IF EXISTS STORE_COPIES;
DROP TABLE IF EXISTS STORE;
DROP TABLE IF EXISTS AUTHOR_BOOK;
DROP TABLE IF EXISTS AUTHOR;
DROP TABLE IF EXISTS BOOK;
DROP TABLE IF EXISTS PUBLISHER;
DROP TABLE IF EXISTS ZIPCODE;


-- Table Creation Steps:
-- 1. ZIPCODE 
DROP TABLE IF EXISTS ZIPCODE;
CREATE TABLE ZIPCODE (
	zipcode CHAR(7)     PRIMARY KEY ,
	City 	VARCHAR(30) NOT NULL,
	State 	VARCHAR(20) NOT NULL,
	Country VARCHAR(20) NOT NULL
);

-- 2. PUBLISHER
DROP TABLE IF EXISTS PUBLISHER;
CREATE TABLE PUBLISHER (
	Publisher_ID 			INT 	    PRIMARY KEY AUTO_INCREMENT,
	Publisher_Name 			VARCHAR(70) NOT NULL,
	Publisher_Email 		VARCHAR(80) NOT NULL,
	Publisher_Office_Address 	VARCHAR(30) NOT NULL,
	zipcode 			CHAR(7)     NOT NULL,
	FOREIGN KEY (zipcode) 
		REFERENCES ZIPCODE (zipcode)
);


-- 3. BOOK
DROP TABLE IF EXISTS BOOK;
CREATE TABLE BOOK (
	ISBN 			VARCHAR(10)  	PRIMARY KEY UNIQUE,
	Book_Name 		VARCHAR(255) 	NOT NULL,
	Price 			float 		NOT NULL,
	Published_Year 		year,
	Publisher_ID 		INT,
	FOREIGN KEY (Publisher_ID) 
		REFERENCES PUBLISHER(Publisher_ID)
);

-- 4. AUTHOR
DROP TABLE IF EXISTS AUTHOR;
CREATE TABLE AUTHOR (
	Author_ID	INT 	    PRIMARY KEY AUTO_INCREMENT,
	Author_Name 	VARCHAR(80) NOT NULL,
	Author_Email 	VARCHAR(80) NOT NULL,
	Author_Address 	VARCHAR(30) NOT NULL,
	Zipcode 	CHAR(7)	    NOT NULL,
	FOREIGN KEY (Zipcode) 
		REFERENCES ZipCode(Zipcode)
);

-- 6. AUTHOR_BOOK
DROP TABLE IF EXISTS AUTHOR_BOOK;
CREATE TABLE AUTHOR_BOOK (
	Author_ID 	INT,
	ISBN 		VARCHAR(10),
	PRIMARY KEY(Author_ID, ISBN),
	FOREIGN KEY (Author_ID) 
		REFERENCES Author(Author_ID),
	FOREIGN KEY (ISBN) 
		REFERENCES Book(ISBN)
);


-- 6. STORE
DROP TABLE IF EXISTS STORE;
CREATE TABLE STORE (
	Store_ID 	INT 	    PRIMARY KEY AUTO_INCREMENT,
	Store_Address 	VARCHAR(30) NOT NULL,
	Zipcode 	CHAR(7)     NOT NULL,
	FOREIGN KEY (Zipcode) 
		REFERENCES ZIPCODE(Zipcode)
);


-- 7. STORE_COPIES
DROP TABLE IF EXISTS STORE_COPIES;
CREATE TABLE STORE_COPIES (
	Store_ID 		INT,
	ISBN 			VARCHAR(10),
	Number_Of_Copies	INT,
	#PRIMARY KEY(Store_ID,ISBN),
	FOREIGN KEY (Store_ID) 
		REFERENCES STORE (Store_ID),
	FOREIGN KEY (ISBN) 
		REFERENCES BOOK (ISBN)
);


-- 8. SUBSCRIPTION
DROP TABLE IF EXISTS SUBSCRIPTION;
CREATE TABLE SUBSCRIPTION (
	Subscription_ID 	INT PRIMARY KEY,
	Subscription_Type 	VARCHAR(10),
	Subscription_Price	float,
	Subscription_Duration 	INT
);


-- 9. CUSTOMER
DROP TABLE IF EXISTS CUSTOMER;
CREATE TABLE CUSTOMER (
	Customer_ID 		INT 	    PRIMARY KEY AUTO_INCREMENT,
	Customer_First_Name	VARCHAR(20) NOT NULL,
	Customer_Last_Name 	VARCHAR(20) NOT NULL,
	Customer_Email 		VARCHAR(50) NOT NULL,
	Customer_Gender 	VARCHAR(15) NOT NULL,
	Customer_Phone 		CHAR(12)    NOT NULL,
	Customer_Address	VARCHAR(30) NOT NULL,
	Zipcode 		CHAR(7)     NOT NULL,
	Subscription_ID 	INT 	    NOT NULL,
	Subscription_Start_Date date 	    NOT NULL,
	FOREIGN KEY (Zipcode) 
		REFERENCES ZIPCODE (Zipcode),
	FOREIGN KEY (Subscription_ID) 
		REFERENCES SUBSCRIPTION (Subscription_ID)
);

-- 10. LOGIN
DROP TABLE IF EXISTS LOGIN;
CREATE TABLE LOGIN(
	Customer_ID 	INT PRIMARY KEY,
	Password  	VARCHAR(10),
	Last_Login 	timestamp,
	FOREIGN KEY (Customer_ID)
		REFERENCES CUSTOMER (Customer_ID)
);

-- 11. PAYMENT
DROP TABLE IF EXISTS PAYMENT;
CREATE TABLE PAYMENT (
	Payment_ID 	INT AUTO_INCREMENT PRIMARY KEY,
	Payment_Type 	VARCHAR(20)
);

-- 12. ORDERS
DROP TABLE IF EXISTS ORDERS;
CREATE TABLE ORDERS (
	Order_ID    INT AUTO_INCREMENT PRIMARY KEY,
	Customer_ID INT NOT NULL,
	Total_Price float,
	Payment_ID  INT,
	FOREIGN KEY (Customer_ID) 
		REFERENCES CUSTOMER (Customer_ID),
	FOREIGN KEY (Payment_ID) 
		REFERENCES PAYMENT (Payment_ID)
);

-- 13. ORDER_ITEMS
DROP TABLE IF EXISTS ORDER_ITEMS;
CREATE TABLE ORDER_ITEMS(
	Order_ID		INT,
	ISBN	 		VARCHAR(10) ,
	Number_Of_Copies 	VARCHAR(10),
	PRIMARY KEY (Order_ID,ISBN),
	FOREIGN KEY (Order_ID) 
		REFERENCES ORDERS (Order_ID),
	FOREIGN KEY (ISBN) 
		REFERENCES BOOK (ISBN)
);


-- 14. WISH_LIST
DROP TABLE IF EXISTS WISH_LIST;
CREATE TABLE WISH_LIST (
	Customer_ID 	INT NOT NULL,
	ISBN		VARCHAR(10) ,
	PRIMARY KEY (Customer_ID,ISBN),
	FOREIGN KEY (Customer_ID) 
		REFERENCES CUSTOMER (Customer_ID),
	FOREIGN KEY (ISBN) 
		REFERENCES BOOK (ISBN)
);

-- 15. CART
DROP TABLE IF EXISTS CART;
CREATE TABLE CART (
	Customer_ID INT,
	ISBN 	    VARCHAR(10) ,
	Quantity    INT,
	PRIMARY KEY (Customer_ID,ISBN),
	FOREIGN KEY (Customer_ID) 
		REFERENCES CUSTOMER (Customer_ID),
	FOREIGN KEY (ISBN) 
		REFERENCES BOOK (ISBN)
);

-- 16. GENRE
DROP TABLE IF EXISTS GENRE;
CREATE TABLE GENRE (
	Genre_ID 	INT AUTO_INCREMENT PRIMARY KEY,
	Genre 		VARCHAR(25)
);

-- 17. BOOK_GENRE
DROP TABLE IF EXISTS BOOK_GENRE;
CREATE TABLE BOOK_GENRE (
	Genre_ID 	INT ,
	ISBN 		VARCHAR(10),
	PRIMARY KEY (Genre_ID,ISBN),
	FOREIGN KEY (Genre_ID) 
		REFERENCES GENRE(Genre_ID),
	FOREIGN KEY (ISBN) 
		REFERENCES BOOK(ISBN)
);

-- 18. CUSTOMER_PREFRENCE
DROP TABLE IF EXISTS CUSTOMER_PREFERENCE;
CREATE TABLE CUSTOMER_PREFERENCE (
	Customer_ID INT,
	Genre_ID    INT ,
	PRIMARY KEY(Customer_ID,Genre_ID),
	FOREIGN KEY (Customer_ID) 
		REFERENCES CUSTOMER(Customer_ID),
	FOREIGN KEY (Genre_ID) 
		REFERENCES GENRE(Genre_ID)
);
